{
module Lexer


open System
open FSharp.Text.Lexing

open Parser

let newline (lexbuf: LexBuffer<char>) =
    lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme (lexbuf : LexBuffer<char>) =
  LexBuffer<char>.LexemeString lexbuf
}


let digit = ['0'-'9']
let integerLiteral = ['-']?digit+

let identChars = ['a'-'z' 'A'-'Z' '_']
let ident = identChars (digit | identChars)*

let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')


rule lex = parse
| whitespace { lex lexbuf }
| newline    { newline lexbuf; lex lexbuf }

| "proc" { PROC }
| "if" { IF }
| "else" { ELSE }
| "else if" { ELSE_IF }
| "while" { WHILE }
| "let" { LET }
| "(" { LPAREN } | ")" { RPAREN }
| "[" { LBRACK } | "]" { RBRACK }
| "{" { LBRACE } | "}" { RBRACE }
| ";" { SEMI }
| "," { COMMA }
| "=" { EQUALS }

| integerLiteral { NUMBER_LIT(lexeme lexbuf) }
| ident { IDENT(lexeme lexbuf) }

| eof { EOF }
| _ { failwith ("unexpected token: " + lexeme lexbuf)}